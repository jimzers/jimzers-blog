{"version":3,"sources":["pages/Home.js","pages/About.js","pages/Contact.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","About","Contact","href","Navbar","to","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAceA,G,mLATP,OACI,yBAAKC,UAAW,kBACZ,oCACA,+X,GALGC,cCkBJC,E,uKAjBP,OACI,6BACI,qCACA,kGAEA,4BACI,mDACA,kDACA,oDACA,yCACA,kD,GAZAD,aCaLE,E,uKAXP,OACI,6BACI,8CACA,qEACQ,uBAAGC,KAAK,2BAAR,UADR,U,GALMH,aCEDI,G,6KAEb,OACI,yBAAKL,UAAW,oBACZ,yBAAKA,UAAW,eAAe,kBAAC,IAAD,CAASM,GAAG,KAAZ,SAC/B,yBAAKN,UAAW,eAAe,kBAAC,IAAD,CAASM,GAAG,UAAZ,UAC/B,yBAAKN,UAAW,eAAe,kBAAC,IAAD,CAASM,GAAG,YAAZ,iB,GANXL,cC2BrBM,E,uKAhBP,OACI,kBAAC,IAAD,KACI,yBAAKP,UAAW,QACZ,wBAAIA,UAAW,SAAf,kBACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWP,W,GAVxCF,aCDEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a93e7af.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './page.scss';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\"page-container\"}>\r\n                <h2>Home</h2>\r\n                <p>Welcome to my blog! My name is Adam Lee, and I love machine learning and web development! I especially like deep learning and its applications to reinforcement learning and generative models. Some research interests of mine include multi-agent reinforcement learning, safe reinforcement learning, and sampling efficiency in reinforcement learning!</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from \"react\";\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>STUFF</h2>\r\n                <p>Mauris sem velit, vehicula eget sodales vitae,\r\n                    rhoncus eget sapien:</p>\r\n                <ol>\r\n                    <li>Nulla pulvinar diam</li>\r\n                    <li>Facilisis bibendum</li>\r\n                    <li>Vestibulum vulputate</li>\r\n                    <li>Eget erat</li>\r\n                    <li>Id porttitor</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, { Component } from \"react\";\r\n\r\nclass Contact extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>GOT QUESTIONS?</h2>\r\n                <p>The easiest thing to do is post on\r\n                    our <a href=\"http://forum.kirupa.com\">forums</a>.\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, { Component } from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport './Navbar.scss';\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\"navbar-container\"}>\r\n                <div className={\"navbar-item\"}><NavLink to=\"/\">Home</NavLink></div>\r\n                <div className={\"navbar-item\"}><NavLink to=\"/stuff\">Stuff</NavLink></div>\r\n                <div className={\"navbar-item\"}><NavLink to=\"/contact\">Contact</NavLink></div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport {\r\n    Route,\r\n    NavLink,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\nimport './App.scss';\r\nimport Home from \"./pages/Home\";\r\nimport About from \"./pages/About\";\r\nimport Contact from \"./pages/Contact\";\r\nimport './App.scss';\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <div className={\"main\"}>\r\n                    <h1 className={\"title\"}>jimzers' Place</h1>\r\n                    <Navbar />\r\n                    <div className=\"content\">\r\n                        <Route exact path=\"/\" component={Home}/>\r\n                        <Route path=\"/stuff\" component={About}/>\r\n                        <Route path=\"/contact\" component={Contact}/>\r\n                    </div>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}